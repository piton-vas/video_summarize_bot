import asyncio
import logging
import os
import tempfile
import json
import uuid
import re
import aiohttp
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.webhook.aiohttp_server import SimpleRequestHandler
from aiogram.client.default import DefaultBotProperties
from rq import Queue
import redis

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

# –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_USER_ID = os.getenv('ADMIN_USER_ID')
if ADMIN_USER_ID:
    ADMIN_USER_ID = int(ADMIN_USER_ID)
    logger.info(f"ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {ADMIN_USER_ID}")
else:
    logger.warning("ADMIN_USER_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Redis
REDIS_HOST = os.getenv('REDIS_HOST', 'redis')
REDIS_PORT = int(os.getenv('REDIS_PORT', 6379))
REDIS_DB = int(os.getenv('REDIS_DB', 0))

# –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
redis_conn = None
redis_conn_rq = None
video_queue = None

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

async def init_redis():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
    global redis_conn, redis_conn_rq, video_queue
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è RQ (–±–µ–∑ decode_responses)
        redis_conn_rq = redis.Redis(host=REDIS_HOST, port=REDIS_PORT, db=REDIS_DB, decode_responses=False)
        redis_conn_rq.ping()
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö (—Å decode_responses)  
        redis_conn = redis.Redis(host=REDIS_HOST, port=REDIS_PORT, db=REDIS_DB, decode_responses=True)
        
        # –û—á–µ—Ä–µ–¥—å –¥–ª—è –≤–∏–¥–µ–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        video_queue = Queue('video_processing', connection=redis_conn_rq)
        
        logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Redis: {REDIS_HOST}:{REDIS_PORT}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
        return False

async def add_video_task(user_id, file_path, task_id):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ –≤ –æ—á–µ—Ä–µ–¥—å"""
    try:
        if not video_queue:
            logger.error("Redis –æ—á–µ—Ä–µ–¥—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return None
            
        task_data = {
            'task_id': task_id,
            'user_id': user_id,
            'file_path': file_path,
            'created_at': datetime.now().isoformat()
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
        job = video_queue.enqueue('worker.process_video_sync', task_data, timeout=1800)  # 30 –º–∏–Ω—É—Ç
        
        logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return job
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å: {e}")
        return None

def get_task_status(task_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–∑ Redis"""
    try:
        if not redis_conn:
            logger.error("Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            return None
            
        task_key = f"task:{task_id}"
        task_data = redis_conn.hgetall(task_key)
        
        if task_data:
            return {
                'status': task_data.get('status', 'unknown'),
                'message': task_data.get('message', ''),
                'result': task_data.get('result', ''),
                'updated_at': task_data.get('updated_at', '')
            }
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ {task_id}: {e}")
        return None

async def monitor_task(task_id, user_id, status_message):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å"""
    try:
        last_status = ""
        
        while True:
            task_status = get_task_status(task_id)
            
            if not task_status:
                await asyncio.sleep(5)
                continue
            
            current_status = task_status['status']
            current_message = task_status['message']
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
            if current_message != last_status:
                try:
                    await status_message.edit_text(f"üîÑ {current_message}")
                    last_status = current_message
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
            if current_status == 'completed':
                # –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
                result_data = json.loads(task_status['result'])
                await handle_task_completion(user_id, result_data, status_message)
                break
            elif current_status == 'failed':
                # –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π
                await status_message.edit_text(f"‚ùå {current_message}")
                break
            
            await asyncio.sleep(3)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–¥–∞—á–∏ {task_id}: {e}")
        await status_message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –∑–∞–¥–∞—á–∏")

async def handle_task_completion(user_id, result_data, status_message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        response_text = (
            f"‚úÖ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üìù <b>–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b>\n"
            f"{result_data['summary']}\n\n"
            f"üìú <b>–ü–æ–ª–Ω–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:</b>\n"
            f"{result_data['transcript'][:1000]}{'...' if len(result_data['transcript']) > 1000 else ''}"
        )
        
        await status_message.edit_text(response_text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –ø–æ–ª–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        if 'output_file' in result_data and os.path.exists(result_data['output_file']):
            with open(result_data['output_file'], 'rb') as f:
                await bot.send_document(
                    chat_id=user_id,
                    document=types.BufferedInputFile(f.read(), filename=os.path.basename(result_data['output_file'])),
                    caption="üìÑ –ü–æ–ª–Ω–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å —Ç–∞–π–º–∫–æ–¥–∞–º–∏"
                )
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            os.unlink(result_data['output_file'])
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        await status_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")


async def download_file_from_url(url, max_size=500*1024*1024):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –ø–æ URL —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–∑–º–µ—Ä–∞"""
    try:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–¥–ª—è cloud.mail.ru)
        connector = aiohttp.TCPConnector(limit_per_host=10)
        timeout = aiohttp.ClientTimeout(total=300)  # 5 –º–∏–Ω—É—Ç
        
        async with aiohttp.ClientSession(
            connector=connector,
            timeout=timeout,
            headers={'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'},
            max_line_size=16384,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            max_field_size=16384   # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –ø–æ–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        ) as session:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ API
            if 'cloud-api.yandex.net' in url:
                try:
                    async with session.get(url) as response:
                        if response.status != 200:
                            return None, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ (–∫–æ–¥ {response.status})"
                        
                        result = await response.json()
                        if 'href' not in result:
                            return None, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞"
                        
                        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –∏–∑ API
                        download_url = result['href']
                        
                        # –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ–º —Å –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–æ–π
                        # –î–ª—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –Ω—É–∂–Ω–æ —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã
                        async with session.head(download_url, allow_redirects=True) as dl_response:
                            if dl_response.status != 200:
                                return None, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ (–∫–æ–¥ {dl_response.status})"
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                            content_length = dl_response.headers.get('content-length')
                            if content_length and int(content_length) > max_size:
                                size_mb = int(content_length) / (1024 * 1024)
                                return None, f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({size_mb:.1f} –ú–ë). –ú–∞–∫—Å–∏–º—É–º: {max_size/(1024*1024):.0f} –ú–ë"
                            
                            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                            file_name = None
                            content_disposition = dl_response.headers.get('content-disposition')
                            if content_disposition:
                                filename_match = re.search(r'filename[*]?=([^;]+)', content_disposition)
                                if filename_match:
                                    file_name = filename_match.group(1).strip('"\'')
                            
                            if not file_name:
                                file_name = os.path.basename(download_url.split('?')[0])
                            
                            if not file_name or '.' not in file_name:
                                file_name = 'yandex_disk_file'
                        
                        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                        temp_dir = '/tmp/shared' if os.path.exists('/tmp/shared') else '/tmp'
                        with tempfile.NamedTemporaryFile(delete=False, dir=temp_dir) as tmp_file:
                            tmp_path = tmp_file.name
                            
                            async with session.get(download_url, allow_redirects=True) as dl_response:
                                if dl_response.status != 200:
                                    return None, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ (–∫–æ–¥ {dl_response.status})"
                                
                                downloaded_size = 0
                                async for chunk in dl_response.content.iter_chunked(8192):
                                    downloaded_size += len(chunk)
                                    if downloaded_size > max_size:
                                        os.unlink(tmp_path)
                                        return None, f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–±–æ–ª—å—à–µ {max_size/(1024*1024):.0f} –ú–ë)"
                                    tmp_file.write(chunk)
                            
                            return tmp_path, file_name
                        
                except Exception as e:
                    return None, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞: {str(e)}"
            
            # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö URL
            async with session.head(url, allow_redirects=True) as response:
                if response.status != 200:
                    return None, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª (–∫–æ–¥ {response.status})"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                content_length = response.headers.get('content-length')
                if content_length and int(content_length) > max_size:
                    size_mb = int(content_length) / (1024 * 1024)
                    return None, f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({size_mb:.1f} –ú–ë). –ú–∞–∫—Å–∏–º—É–º: {max_size/(1024*1024):.0f} –ú–ë"
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏–ª–∏ URL
                file_name = None
                content_disposition = response.headers.get('content-disposition')
                if content_disposition:
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å filename –∏–∑ content-disposition
                    filename_match = re.search(r'filename[*]?=([^;]+)', content_disposition)
                    if filename_match:
                        file_name = filename_match.group(1).strip('"\'')
                
                if not file_name:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL
                    file_name = os.path.basename(url.split('?')[0])
                
                if not file_name or '.' not in file_name:
                    file_name = 'downloaded_file'
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            temp_dir = '/tmp/shared' if os.path.exists('/tmp/shared') else '/tmp'
            with tempfile.NamedTemporaryFile(delete=False, dir=temp_dir) as tmp_file:
                tmp_path = tmp_file.name
                
                async with session.get(url, allow_redirects=True) as response:
                    if response.status != 200:
                        return None, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª (–∫–æ–¥ {response.status})"
                    
                    downloaded_size = 0
                    async for chunk in response.content.iter_chunked(8192):
                        downloaded_size += len(chunk)
                        if downloaded_size > max_size:
                            os.unlink(tmp_path)
                            return None, f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–±–æ–ª—å—à–µ {max_size/(1024*1024):.0f} –ú–ë)"
                        tmp_file.write(chunk)
                
                return tmp_path, file_name
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ URL: {e}")
        error_msg = str(e)
        

        
        return None, f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {error_msg}"


def is_valid_url(url):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º URL"""
    url_pattern = re.compile(
        r'^https?://'  # http:// or https://
        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+[A-Z]{2,6}\.?|'  # domain...
        r'localhost|'  # localhost...
        r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'  # ...or ip
        r'(?::\d+)?'  # optional port
        r'(?:/?|[/?]\S+)$', re.IGNORECASE)
    return url_pattern.match(url) is not None


async def convert_cloud_url_to_direct(url):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Å—ã–ª–∫–∏ –æ–±–ª–∞—á–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â –≤ –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏"""
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ Google Drive
        if 'drive.google.com' in url:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ñ–∞–π–ª–∞
            file_id = None
            if '/file/d/' in url:
                match = re.search(r'/file/d/([a-zA-Z0-9-_]+)', url)
                if match:
                    file_id = match.group(1)
            elif 'id=' in url:
                match = re.search(r'id=([a-zA-Z0-9-_]+)', url)
                if match:
                    file_id = match.group(1)
            
            if file_id:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                direct_url = f"https://drive.google.com/uc?export=download&id={file_id}"
                return direct_url
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ Dropbox
        elif 'dropbox.com' in url and '?dl=0' in url:
            # –ó–∞–º–µ–Ω—è–µ–º ?dl=0 –Ω–∞ ?dl=1 –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            direct_url = url.replace('?dl=0', '?dl=1')
            return direct_url
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ OneDrive
        elif 'onedrive.live.com' in url or '1drv.ms' in url:
            # –î–ª—è OneDrive –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å &download=1
            if '?' in url:
                direct_url = url + '&download=1'
            else:
                direct_url = url + '?download=1'
            return direct_url
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
        elif 'disk.yandex.ru/d/' in url:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á –∏–∑ URL –≤–∏–¥–∞ https://disk.yandex.ru/d/KEY
            match = re.search(r'disk\.yandex\.ru/d/([^/?]+)', url)
            if match:
                key = match.group(1)
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π API –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏
                direct_url = f"https://cloud-api.yandex.net/v1/disk/public/resources/download?public_key=https://disk.yandex.ru/d/{key}"
                return direct_url
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
        elif 'disk.yandex.ru' in url and ('/i/' in url or '/d/' in url):
            # –î–ª—è —Å—Ç–∞—Ä—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å—Å—ã–ª–æ–∫ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
            if '?download=1' not in url:
                separator = '&' if '?' in url else '?'
                direct_url = url + separator + 'download=1'
                return direct_url
            
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π URL
        return url
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è URL: {e}")
        return url


@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.full_name}!</b>\n\n"
        f"–Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤.\n\n"
        f"<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        f"‚Ä¢ /start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        f"‚Ä¢ /ping - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞\n"
        f"‚Ä¢ /help - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞\n"
        f"‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n\n"
        f"<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∏–¥–µ–æ/–∞—É–¥–∏–æ —Ñ–∞–π–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª, –∏ —è —Å–æ–∑–¥–∞–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É —Å –∫—Ä–∞—Ç–∫–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º!\n\n"
        f"üìé –§–∞–π–ª—ã –¥–æ 20 –ú–ë - –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –Ω–∞–ø—Ä—è–º—É—é\n"
        f"üîó –§–∞–π–ª—ã –¥–æ 500 –ú–ë - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É\n"
        f"‚òÅÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –æ–±–ª–∞—á–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (–≤–∫–ª—é—á–∞—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫)"
    )


@dp.message(Command('ping'))
async def ping_handler(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ping
    """
    user_id = message.from_user.id
    await message.answer(f"pong _ (–¢–≤–æ–π ID: {user_id})")


@dp.message(Command('status'))
async def status_handler(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status
    """
    try:
        if not redis_conn or not video_queue:
            status_text = (
                f"üî¥ <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
                f"‚Ä¢ Redis: –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n"
                f"‚Ä¢ –°–∏—Å—Ç–µ–º–∞: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            )
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
            redis_conn.ping()
            queue_length = len(video_queue)
            
            status_text = (
                f"üü¢ <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
                f"‚Ä¢ Redis: –ø–æ–¥–∫–ª—é—á–µ–Ω\n"
                f"‚Ä¢ –û—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {queue_length} –∑–∞–¥–∞—á\n"
                f"‚Ä¢ –í–æ—Ä–∫–µ—Ä—ã: –∞–∫—Ç–∏–≤–Ω—ã\n"
                f"‚Ä¢ –°–∏—Å—Ç–µ–º–∞: —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
            )
    except Exception as e:
        status_text = (
            f"üî¥ <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
            f"‚Ä¢ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis\n"
            f"‚Ä¢ –°–∏—Å—Ç–µ–º–∞: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"
            f"‚Ä¢ –î–µ—Ç–∞–ª–∏: {str(e)}"
        )
    
    await message.answer(status_text)


@dp.message(Command('help'))
async def help_handler(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    """
    await message.answer(
        "<b>üé• –ë–æ—Ç –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ</b>\n\n"
        "<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>\n"
        "‚Ä¢ –í–∏–¥–µ–æ: MP4, AVI, MOV, MKV, WMV, WEBM\n"
        "‚Ä¢ –ê—É–¥–∏–æ: MP3, WAV, M4A, OGG, FLAC\n\n"
        "<b>–°–ø–æ—Å–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤:</b>\n"
        "1. üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é (–¥–æ 20 –ú–ë)\n"
        "2. üîó –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª (–¥–æ 500 –ú–ë)\n"
        "   ‚Ä¢ –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã\n"
        "   ‚Ä¢ Google Drive, Dropbox, OneDrive\n"
        "   ‚Ä¢ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫\n\n"
        "<b>–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç:</b>\n"
        "1. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–∞—à —Ñ–∞–π–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É\n"
        "2. –°—Ç–∞–≤–∏—Ç –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏\n"
        "3. –í–æ—Ä–∫–µ—Ä—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç —Ñ–∞–π–ª –≤ —Ñ–æ–Ω–µ\n"
        "4. –°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É —Å –ø–æ–º–æ—â—å—é AI\n"
        "5. –î–µ–ª–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ\n"
        "6. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ç–∞–π–º–∫–æ–¥–∞–º–∏\n\n"
        "<b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>\n"
        "‚Ä¢ –§–∞–π–ª—ã —á–µ—Ä–µ–∑ Telegram: –¥–æ 20 –ú–ë\n"
        "‚Ä¢ –§–∞–π–ª—ã –ø–æ —Å—Å—ã–ª–∫–µ: –¥–æ 500 –ú–ë\n"
        "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 10 –º–∏–Ω—É—Ç\n\n"
        "<b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:</b>\n"
        "‚Ä¢ –í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n"
        "‚Ä¢ –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å\n"
        "‚Ä¢ –û—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å\n\n"
        "<b>–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏ –∂–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!</b>"
    )


@dp.message(lambda message: message.content_type in ['video', 'audio', 'document'])
async def media_handler(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    """
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —Ñ–∞–π–ª –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_states and user_states[user_id].get('processing'):
        await message.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –í–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ñ–∞–π–ª –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    file_info = None
    file_name = None
    
    if message.content_type == 'video':
        file_info = message.video
        file_name = f"video_{user_id}_{message.message_id}.mp4"
    elif message.content_type == 'audio':
        file_info = message.audio
        file_name = f"audio_{user_id}_{message.message_id}.mp3"
    elif message.content_type == 'document':
        file_info = message.document
        file_name = message.document.file_name or f"document_{user_id}_{message.message_id}"
        
        # –û—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        clean_file_name = file_name.rstrip('_')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        allowed_extensions = ['.mp4', '.avi', '.mov', '.mkv', '.wmv', '.webm', '.mp3', '.wav', '.m4a', '.ogg', '.flac']
        if not any(clean_file_name.lower().endswith(ext) for ext in allowed_extensions):
            await message.answer(
                "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.\n\n"
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                "‚Ä¢ –í–∏–¥–µ–æ: MP4, AVI, MOV, MKV, WMV, WEBM\n"
                "‚Ä¢ –ê—É–¥–∏–æ: MP3, WAV, M4A, OGG, FLAC"
            )
            return
    
    if not file_info:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (20 –ú–ë –ª–∏–º–∏—Ç - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram Bot API)
    if file_info.file_size > 20 * 1024 * 1024:
        await message.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20 –ú–ë.\n\n–≠—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram Bot API –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤.")
        return
    

    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    user_states[user_id] = {'processing': True}
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    status_message = await message.answer("üì• –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        file = await bot.get_file(file_info.file_id)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ shared volume
        temp_dir = '/tmp/shared' if os.path.exists('/tmp/shared') else '/tmp'
        # –î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–∏—â–µ–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        if message.content_type == 'document' and file_name:
            clean_file_name = file_name.rstrip('_')
            suffix = os.path.splitext(clean_file_name)[1] if clean_file_name else '.tmp'
        else:
            suffix = os.path.splitext(file_name)[1] if file_name else '.tmp'
        
        with tempfile.NamedTemporaryFile(delete=False, suffix=suffix, dir=temp_dir) as tmp_file:
            tmp_path = tmp_file.name
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            await status_message.edit_text("üì• –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª...")
            await bot.download_file(file.file_path, tmp_path)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–¥–∞—á–∏
            task_id = str(uuid.uuid4())
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
            await status_message.edit_text("üìã –î–æ–±–∞–≤–ª—è—é –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
            job = await add_video_task(user_id, tmp_path, task_id)
            
            if job:
                await status_message.edit_text("‚è≥ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å. –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–¥–∞—á–∏
                asyncio.create_task(monitor_task(task_id, user_id, status_message))
            else:
                await status_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å")
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
                os.unlink(tmp_path)
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        await status_message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    
    finally:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if user_id in user_states:
            user_states[user_id]['processing'] = False


@dp.message(lambda message: message.text and is_valid_url(message.text.strip()))
async def url_handler(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ URL-—Å—Å—ã–ª–æ–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    """
    user_id = message.from_user.id
    url = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —Ñ–∞–π–ª –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_states and user_states[user_id].get('processing'):
        await message.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –í–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ñ–∞–π–ª –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    user_states[user_id] = {'processing': True}
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    status_message = await message.answer("üîó –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Å—ã–ª–∫—É...")
    
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Å—ã–ª–∫—É –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É
        await status_message.edit_text("üîó –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Å—ã–ª–∫—É...")
        direct_url = await convert_cloud_url_to_direct(url)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –ø–æ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ
        await status_message.edit_text("üì• –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª...")
        tmp_path, file_name = await download_file_from_url(direct_url)
        
        if not tmp_path:
            await status_message.edit_text(f"‚ùå {file_name}")
            return
        
        # –û—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        clean_file_name = file_name.rstrip('_')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        allowed_extensions = ['.mp4', '.avi', '.mov', '.mkv', '.wmv', '.webm', '.mp3', '.wav', '.m4a', '.ogg', '.flac']
        if not any(clean_file_name.lower().endswith(ext) for ext in allowed_extensions):
            await status_message.edit_text(
                "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.\n\n"
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                "‚Ä¢ –í–∏–¥–µ–æ: MP4, AVI, MOV, MKV, WMV, WEBM\n"
                "‚Ä¢ –ê—É–¥–∏–æ: MP3, WAV, M4A, OGG, FLAC"
            )
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(tmp_path)
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–¥–∞—á–∏
        task_id = str(uuid.uuid4())
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
        await status_message.edit_text("üìã –î–æ–±–∞–≤–ª—è—é –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        job = await add_video_task(user_id, tmp_path, task_id)
        
        if job:
            await status_message.edit_text("‚è≥ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å. –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–¥–∞—á–∏
            asyncio.create_task(monitor_task(task_id, user_id, status_message))
        else:
            await status_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å")
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
            os.unlink(tmp_path)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL: {e}")
        await status_message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    
    finally:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if user_id in user_states:
            user_states[user_id]['processing'] = False


@dp.message()
async def echo_handler(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    await message.answer(
        "ü§ñ –Ø —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ:\n"
        "‚Ä¢ –í–∏–¥–µ–æ —Ñ–∞–π–ª (MP4, AVI, MOV, MKV, WMV, WEBM)\n"
        "‚Ä¢ –ê—É–¥–∏–æ —Ñ–∞–π–ª (MP3, WAV, M4A, OGG, FLAC)\n"
        "‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª (–¥–æ 500 –ú–ë)\n"
        "‚Ä¢ –§–∞–π–ª—ã –∏–∑ –æ–±–ª–∞—á–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â (Google Drive, Dropbox, OneDrive, –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫)\n\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏."
    )


async def send_startup_notification() -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    """
    if ADMIN_USER_ID:
        try:
            startup_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            queue_length = len(video_queue) if video_queue else 0
            
            await bot.send_message(
                chat_id=ADMIN_USER_ID,
                text="üöÄ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
                     f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {startup_time}\n"
                     f"üì¶ –í–µ—Ä—Å–∏—è: microservices\n"
                     f"üÜî ID –±–æ—Ç–∞: {bot.id if hasattr(bot, 'id') else 'Unknown'}\n"
                     f"üìã –û—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {queue_length} –∑–∞–¥–∞—á\n"
                     f"üîß –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: Redis + Workers"
            )
            logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")


async def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    """
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Redis
    if not await init_redis():
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∞–ø–¥–µ–π—Ç—ã
    await bot.delete_webhook(drop_pending_updates=True)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
    await send_startup_notification()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
